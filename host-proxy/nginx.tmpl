gzip on;
gzip_disable "msie6";
gzip_vary on;
gzip_proxied any;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log /proc/self/fd/1 vhost;
error_log /proc/self/fd/2;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering on;
proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

proxy_read_timeout 300s;
client_max_body_size 3000m;

# Here
{{ range $path, $containers := groupByMulti $ "Env.VIRTUAL_PATH" "," }}
{{ range $container := $containers }}
upstream {{ $path }} {
   {{ $addrLen := len $container.Addresses }}
   {{/* If only 1 port exposed, use that */}}
   {{ if eq $addrLen 1 }}
      {{ with $address := index $container.Addresses 0 }}
         # {{$container.Name}}
         server {{ $address.IP }}:{{ $address.Port }};
      {{ end }}
   {{/* default to standard web port 80 */}}
   {{ else }}
       {{ range $address := $container.Addresses }}
          {{ if eq $address.Port "80" }}
          # {{$container.Name}}
          server {{ $address.IP }};
          {{ end }} 
       {{ end }}
   {{ end }}
}                      

{{ end }}
{{ end }}

server {
   listen 80 default_server;
   server_name _; # This is just an invalid value which will never trigger on a real hostname.
   location / {
      return 503;
   }
   #Default for AWS elb health testing. Will test that proxy server exists
   location /index.html {
      return 200;
   }
   {{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
   location /ping/{{$host}} {
      access_log /var/log/nginx/elb.log vhost;
      return 200;
   }
   {{ end }}
   {{ range $path, $containers := groupByMulti $ "Env.VIRTUAL_PATH" "," }}
   location /ping/{{$path}} {
      access_log /var/log/nginx/elb.log vhost;
      return 200;
   }
   location /{{ $path }} {
      proxy_pass http://{{ $path }};
   }
   {{ end }}
   location /metrics {
      access_log /dev/fd/1;
      error_log /dev/fd/2;
      return 200;
   }   
}


{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream {{ $host }} {
{{ range $container := $containers }}
   {{ $addrLen := len $container.Addresses }}
   {{/* If only 1 port exposed, use that */}}
   {{ if eq $addrLen 1 }}
      {{ with $address := index $container.Addresses 0 }}
         # {{$container.Name}}
         server {{ $address.IP }}:{{ $address.Port }};
      {{ end }}
   {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
   {{ else if $container.Env.VIRTUAL_PORT }}
      {{ range $address := .Addresses }}
         {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
         # {{$container.Name}}
         server {{ $address.IP }}:{{ $address.Port }};
         {{ end }}
      {{ end }}
   {{/* Else default to standard web port 80 */}}
   {{ else }}
      {{ range $address := $container.Addresses }}
         {{ if eq $address.Port "80" }}
         # {{$container.Name}}
         server {{ $address.IP }};
         {{ end }}
      {{ end }}
   {{ end }}
{{ end }}
}

                                                                                                                                                                     
server {
   server_name {{ $host }};
   listen 80;
   location / {
      proxy_pass http://{{ $host }};
   }
}

server {
   server_name {{ $host }};
   listen 8080;

   location / {

   {{ range $container := $containers }}
      {{ range $address := $container.Addresses }}
         {{ if eq $address.Port "8080" }}
         proxy_pass http://{{ $host }};
         {{ end }}
      {{ end }}
   {{ end }}
   }
}
{{ else }}

server {
   server_name {{ $host }};
   location / {
      proxy_pass http://{{ $host }};
   }
}

{{ end }}
